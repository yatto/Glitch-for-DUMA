cat << CTAG
{
    name:CPU,
    elements:[
	{ SLiveLabel:{
		title:"Scaling Frequencies",
		description: "Scaling max-min frequencies are affected by thermal driver and mpdecision hotplug driver in case it is enabled. MSM Limiter Driver will make sure scaling frequencies are desired ranges MOST of the time. We do let other drivers affect scaling frequencies because this manipulation helps to achieve performance without compromising stability. Below live monitor reflects actual scaling max and min frequencies in MHz per CPU core.",
		refresh:1000,
		action:"live SCALINGFREQ"
	}},
	{ STitleBar:{
		title:"MSM Limiter"
	}},
	{ SDescription:{
		description:"The following controls will override current CPU Max/Min frequencies, enabling overclocking, underclocking, and fine tuning of each core independently. It also set CPU Max Frequency whenever device resumes and CPU Min Frequency whenever device suspends. Ideal max frequency should always be higher than min frequency. Ideal min frequency should be lesser than max frequency and max screen off frequency."
	}},
	{ SSeekBar:{
       		title:"CPU0 Max Frequency",
		description:"Set the maximum frequency the CPU0 scales up to. CPU0 is used for most critical kernel tasks, it is recommended not to reduce this frequency below 1.2GHz.",
		action:"msmlimiter resume_max_freq 0",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				$BB echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU1 Max Frequency",
		description:"Set the maximum frequency the CPU1 scales up to.",
		action:"msmlimiter resume_max_freq 1",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				$BB echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU2 Max Frequency",
		description:"Set the maximum frequency the CPU2 scales up to.",
		action:"msmlimiter resume_max_freq 2",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				$BB echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU3 Max Frequency",
		description:"Set the maximum frequency the CPU3 scales up to.",
		action:"msmlimiter resume_max_freq 3",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				$BB echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU0 Suspend Max Frequency",
		description:"Set the maximum frequency the CPU0 scales up to on suspend.",
		action:"msmlimiter suspend_max_freq 0",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				$BB echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU1 Suspend Max Frequency",
		description:"Set the maximum frequency the CPU1 scales up to on suspend.",
		action:"msmlimiter suspend_max_freq 1",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				$BB echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU2 Suspend Max Frequency",
		description:"Set the maximum frequency the CPU2 scales up to on suspend.",
		action:"msmlimiter suspend_max_freq 2",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				$BB echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU3 Suspend Max Frequency",
		description:"Set the maximum frequency the CPU3 scales up to on suspend.",
		action:"msmlimiter suspend_max_freq 3",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				$BB echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU0 Min Frequency",
		description:"Set the minimum frequency the CPU0 scales up to.",
		action:"msmlimiter suspend_min_freq 0",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				$BB echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU1 Min Frequency",
		description:"Set the minimum frequency the CPU1 scales up to.",
		action:"msmlimiter suspend_min_freq 1",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				$BB echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU2 Min Frequency",
		description:"Set the minimum frequency the CPU2 scales up to.",
		action:"msmlimiter suspend_min_freq 2",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				$BB echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU3 Min Frequency",
		description:"Set the minimum frequency the CPU3 scales up to.",
		action:"msmlimiter suspend_min_freq 3",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				$BB echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ STitleBar:{
		title:"CPU Governor"
	}},
	{ SDescription:{
		description:"The CPU governor determines how the respective CPU behaves in response to changes in workload. Changing the governor will impact how the CPU scales through the frequency steps available."
	}},
        { SOptionList:{
		title:"CPU0",
                action:"msmlimiter scaling_governor 0",
                values:[
`
                        for GOVERNOR in \`$BB cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors\` ; do
                                $BB echo "\"$GOVERNOR\","
                        done
`
                ],
		notify:[
			{
				on:APPLY,
				do:[ REFRESH, CANCEL ],
				to:"/sys/devices/system/cpu/cpufreq"
			},
			{
				on:REFRESH,
				do:REFRESH,
				to:"/sys/devices/system/cpu/cpufreq"
			}

		]
        }},
        { SOptionList:{
		title:"CPU1",
                action:"msmlimiter scaling_governor 1",
                values:[
`
                        for GOVERNOR in \`$BB cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors\` ; do
                                $BB echo "\"$GOVERNOR\","
                        done
`
                ],
		notify:[
			{
				on:APPLY,
				do:[ REFRESH, CANCEL ],
				to:"/sys/devices/system/cpu/cpufreq"
			},
			{
				on:REFRESH,
				do:REFRESH,
				to:"/sys/devices/system/cpu/cpufreq"
			}
		]
        }},
	{ SOptionList:{
		title:"CPU2",
                action:"msmlimiter scaling_governor 2",
                values:[
`
                        for GOVERNOR in \`$BB cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors\` ; do
                                $BB echo "\"$GOVERNOR\","
                        done
`
                ],
		notify:[
			{
				on:APPLY,
				do:[ REFRESH, CANCEL ],
				to:"/sys/devices/system/cpu/cpufreq"
			},
			{
				on:REFRESH,
				do:REFRESH,
				to:"/sys/devices/system/cpu/cpufreq"
			}
		]
        }},
	{ SOptionList:{
		title:"CPU3",
                action:"msmlimiter scaling_governor 3",
                values:[
`
                        for GOVERNOR in \`$BB cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors\` ; do
                                $BB echo "\"$GOVERNOR\","
                        done
`
                ],
		notify:[
			{
				on:APPLY,
				do:[ REFRESH, CANCEL ],
				to:"/sys/devices/system/cpu/cpufreq"
			},
			{
				on:REFRESH,
				do:REFRESH,
				to:"/sys/devices/system/cpu/cpufreq"
			}
		]
        }},
`if [ -f "/sys/devices/system/cpu/sched_mc_power_savings" ]; then
				SMPS=\`$BB cat /sys/devices/system/cpu/sched_mc_power_savings\`
					$BB echo '{ SPane:{
						title:"CPU Multicore Power Saving",
						description:"Try to group tasks into the least cores possible. The higher the value, the more aggressive the grouping."
					}},
					{ SOptionList:{
						default:'$SMPS',
						action:"generic /sys/devices/system/cpu/sched_mc_power_savings",
						values:{ 0:"Disabled", 1:"Enabled", 2:"Aggressive"
						}
					}},'
				fi`
				`if [ -f "/sys/module/workqueue/parameters/power_efficient" ]; then
				PE=\`bool /sys/module/workqueue/parameters/power_efficient\`
					$BB echo '{ SPane:{
						title:"Power-efficient Workqueues",
					}},
						{ SCheckBox:{
							label:"Enable",
							description:"This will help to reduce power consumption at the cost of slight performance overhead. PE workqueues are used for unbound scheduled work to save load on sibling CPU cores and queuing work on CPU0.",
							default:'$PE',
							action:"boolean /sys/module/workqueue/parameters/power_efficient",
						}},'
				fi`
				`if [ -f "/sys/kernel/sched/arch_power" ]; then
				AP=\`cat /sys/kernel/sched/arch_power\`
					$BB echo '{ SPane:{
						title:"Arch Power",
					}},
						{ SCheckBox:{
							label:"Enable",
							description:"Arch Power causes arch dependent power functions to be used instead of generic high resolution timer ticks and double ticks.",
							default:'$AP',
							action:"generic /sys/kernel/sched/arch_power",
						}},'
				fi`
				`if [ -f "/sys/kernel/sched/gentle_fair_sleepers" ]; then
				GFS=\`cat /sys/kernel/sched/gentle_fair_sleepers\`
					$BB echo '{ SPane:{
						title:"Gentle Fair Sleepers",
					}},
						{ SCheckBox:{
							label:"Enable",
							description:"Sleeper Fairness is a concept used by CFS which treat sleeping/waiting tasks as if they were in a run queue. This implies tasks which spend most of the time waiting for an user input and such will get a fair share of CPU when they need it. Disabling Gentle Fair Sleepers could improve UI responsiveness.",
							default:'$GFS',
							action:"generic /sys/kernel/sched/gentle_fair_sleepers",
						}},'
				fi`
			`[ -d "/sys/module/pm_8x60" ] && PM=/sys/module/pm_8x60;
			[ -d "/sys/module/msm_pm" ] && PM=/sys/module/msm_pm;
			
			if [ -d "$PM/modes/cpu0" ]; then
				$BB echo '{ SPane:{
					title:"Krait C-States Settings"
				}},'
				if [ -f "$PM/modes/cpu0/wfi/idle_enabled" ]; then
				C0=\`$BB cat $PM/modes/cpu0/wfi/idle_enabled\`;
					$BB echo '{ SCheckBox:{
						description:"Shallowest Sleep with instant wake up.",
						label:"C0 (WFI)",
						default:'$C0',
						action:"socset '$PM'/modes/cpu0/wfi/idle_enabled wfi"
					}},'
				fi
				if [ -f "$PM/modes/cpu0/retention/idle_enabled" ]; then
				C1=\`$BB cat $PM/modes/cpu0/retention/idle_enabled\`;
					$BB echo '{ SCheckBox:{
						description:"Slightly deeper sleep with slight latency when waking up. (Disable this if you encounter screen flickering)",
						label:"C1 (Retention)",
						default:'$C1',
						action:"socset '$PM'/modes/cpu0/retention/idle_enabled retention"
					}},'
				fi
				if [ -f "$PM/modes/cpu0/standalone_power_collapse/idle_enabled" ]; then
				C2=\`$BB cat $PM/modes/cpu0/standalone_power_collapse/idle_enabled\`;
					$BB echo '{ SCheckBox:{
						description:"Deeper sleep with longer latency when waking up.",
						label:"C2 (Stand Alone Power Collapse)",
						default:'$C2',
						action:"socset '$PM'/modes/cpu0/standalone_power_collapse/idle_enabled standalone_power_collapse"
					}},'
				fi
				if [ -f "$PM/modes/cpu0/power_collapse/idle_enabled" ]; then
				C3=\`$BB cat $PM/modes/cpu0/power_collapse/idle_enabled\`;
					$BB echo '{ SCheckBox:{
						description:"Really deep sleep with longest latency when waking up.",
						label:"C3 (Power Collapse)",
						default:'$C3',
						action:"socset '$PM'/modes/cpu0/power_collapse/idle_enabled power_collapse"
					}},'
				fi
	fi`
	{ STitleBar:{
		title:"Governor tunables"
        }},
	{ STreeDescriptor:{
		description:"The various configuration items which are governor-dependent.",
					path:"`sh $DEVICE DirCPUGovernorTree`",
					generic: {
						directory: {
							STreeDescriptor:{
								generic: {
									directory: {},
									element: {
										SGeneric: { title:"@BASENAME" }
									}
								},
								exclude: [ 
									"boost_duration", "boostpulse", "cpu_utilization", "multi_phase_freq_tbl", "profile", "profile_list", "sampling_rate_min", 
									"up_threshold_h", "up_threshold_l", "version_profiles", "vdd_levels", "vdd_levels_GPU"
								]
							},
						}
					},
					exclude: [ "all_cpus", "kset", "overall_stats", "stats", "vdd_table" ]
				}},
	]
}
CTAG
